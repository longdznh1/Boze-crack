plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name = "modrinth"
        url = "https://api.modrinth.com/maven"
    }

    maven {
        name = "meteor-maven"
        url = "https://maven.meteordev.org/snapshots"
    }

    maven {
        name = 'babbaj-maven'
        url = 'https://babbaj.github.io/maven/'
    }
}

loom {
    accessWidenerPath = file("src/main/resources/boze.accesswidener")
}

base {
    archivesName = project.archives_base_name
}

configurations {
    compile
    compileMod
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    compileMod "dev.babbaj:nether-pathfinder:1.5"
    compileMod "meteordevelopment:baritone:${project.baritone_version}-SNAPSHOT"
    modCompileOnly "maven.modrinth:sodium:${project.sodium_version}"

    configurations.compile.dependencies.each {
        modImplementation(it)
    }

    configurations.compileMod.dependencies.each {
        modImplementation(it)
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": inputs.properties.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    inputs.property "archivesName", project.base.archivesName

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.compileMod.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}